{
    // These are the default settings. They are located in
    //
    //    (Installed) Packages/CMakeBuilder/CMakeBuilder.sublime-settings
    //    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //
    // You should not edit this file, as it gets overwritten after every update.
    // Instead, if you want to override the default settings, create a new file
    // in Packages/User/CMakeBuilder.sublime-settings, and copy and paste over
    // from this file. Then change what you want.
    //
    // If you came here from
    //
    //    Preferences -> Package Settings -> CMakeBuilder -> Settings,
    //
    // then Sublime Text has already opened a "user" file for you to the right
    // of this view in which you may override settings.

    //==========================================================================

    // A string pointing to the directory where you want to build the project. A
    // good first choice is `$folder/build`.
    "build_folder": "$folder/build",

    // The directory where the root CMakeLists.txt file resides.
    "root_folder": "$folder",

    // A dictionary where each value is either a string or a boolean. The key-value
    // pairs are passed to the CMake invocation when you run `cmake_configure` as
    // `-D` options. For example, if you have the key-value pair `"MY_VAR": "BLOB"`
    // in the dictionary, the CMake invocation will contain `-D MY_VAR=BLOB`. Boolean
    // values are converted to `ON` or `OFF`. For instance, if you have the key-value
    // pair `"BUILD_SHARED_LIBS": true`in the dictionary, the CMake invocation will
    // contain `-D BUILD_SHARED_LIBS=ON`.
    "command_line_overrides": {},

    // The generator to use when configuring the CMake project. If null, a suitable
    // default for the current platform will be used.
    // - Available generators for osx: "Ninja" and "Unix Makefiles".
    //   If no generator is specified on osx, "Unix Makefiles" is the default
    //   generator. For "Ninja", you must have ninja installed. Install it with brew.
    //
    // - Available generators for linux: "Ninja" and "Unix Makefiles".
    //   If no generator is specified on linux, "Unix Makefiles" is the default
    //   generator. For "Ninja", you must have ninja installed. Install it with your
    //   package manager.
    //
    // - Available generators for windows: "Ninja" and "Visual Studio".
    //   If no generator is specified on windows, "Visual Studio" is the default
    //   generator. You need Microsoft Visual Studio C++ in order to configure your
    //   project wether you're using Ninja or Visual Studio.
    "generator": null,

    // For generators that support a platform argument. In the case of this plugin
    // that would be Visual Studio. In practice, set this to "x64" to build 64-bit
    // binaries instead of the default 32-bit. This is the `-A` argument passed to
    // CMake.
    "generator_platform": null,

    // For generators that support a toolset argument. In the case of this plugin
    // that would be Visual Studio. In practice, set this to `{ "host": "x64" }` to
    // use the 64-bit compiler instead of the 32-bit compiler. This is the `-T`
    // argument passed to CMake. As in the case of `command_line_overrides`, the
    // dictionary is converted into a string as in `key1=value1;key2=value2`.
    "generator_toolset": {},

    // When using the Ninja generator on Windows, by default it will use the most
    // recent Visual Studio SDK on the system. If you need another SDK, define
    // the `vs_major_version` number to be 15 or 16.
    "generator_vs_major_version": null,

    // The path to the CMake binary. If CMake is in your PATH, then you don't
    // have to change this. Otherwise, specify the full path to the CMake
    // executable.
    "cmake_binary": "cmake",

    // This is a dict of key-value pairs of strings. Place your environment
    // variables at configure time in here. For example, to select clang as
    // your compiler if you have gcc set as default, you can use
    //     "env": { "CC": "clang", "CXX": "clang++" }
    "env": {},

    // If true, adds the option -Wno-dev to the cmake invocation during
    // configure time.
    "silence_developer_warnings": false,

    // If true, completely clears the cache when you run
    // "CMakeBuilder: Configure"
    "always_clear_cache_before_configure": false,

    // The path to the CTest binary. This is used when running the "ctest" build
    // variant in your build system.
    "ctest_binary": "ctest",

    // The command line arguments that are passed to CTest when you run the
    // "ctest" variant.
    "ctest_command_line_args": "--output-on-failure",

    // When running an executable, use a panel instead of a view.
    "terminus_use_panel": false,

    // When running an executable, close the view/panel when the process has
    // finished.
    "terminus_auto_close": false,

    // Print debugging info to the Sublime Text console.
    "cmake_debug": false
}
